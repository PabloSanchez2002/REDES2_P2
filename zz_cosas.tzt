#Para ver las listas de mensajes y si contiene mensajes
sudo rabbitmqctl list_queues    

#Correr esto para que vaya el rabitMQ
sudo apt-get install rabbitmq-server

sudo systemctl stop rabbitmq-server
sudo systemctl start rabbitmq-server
sudo systemctl enable rabbitmq-server


sudo su postgres
psql



\c p2redes
\dt


pip install psycopg2
pip install pika


- Un cliente no registrado intenta hacer un pedido, el sistema
debe contestar con un mensaje indicando que no está registrado. Sin embargo, NO hace falta modelar los productos, no hay que tener un registro
de productos válidos.


• El código fuente debe estar correctamente comentado
• Se valorará que el sistema se organice como un paquete de Python
• Se deben implementar un número suﬁciente de tests unitarios. Idealmente, se recomienda utilizar una metodología de desarrollo TDD (Test-Driven Development)
-   Sin embargo, se aconseja para el desarrollo y la entrega usar el servidor está desplegado en
redes2.ii.uam.es (cambiar 'localhost' de ConnectionParameters por 'redes2.ii.uam.es')
-   Para que en el servidor compartido no existan conﬂictos en los nombres de las colas de mensajes, poned a todas como preﬁjo GRUPO-PAREJA_
y después el nombre de la cola, por ejemplo: 2321-01_robots.


???Si un cliente no registrado intenta hacer un pedido, el sistema
debe contestar con un mensaje indicando que no está registrado.??

• La implementación de todos los actores involucrados: controlador, cliente, robot y repartidor
• Un script de python que lance el controlador (launch_controller.py)
• Un script de python que lance un cliente y simule una serie de acciones (launch_client.py)
• Un script de python para simular un cliente desde línea de comandos (commandline_client.py)
• Un script de python que lance un robot (launch_robot.py)
• Un script de python que lance un repartidor (launch_delivery.py)
• Scripts de bash que simulen situaciones "reales" en los que se utilicen el resto de scripts de Python, que se deben ejecutar desde distintos
procesos.